name: News Aggregator Workflow
on:
  workflow_dispatch:  # Allows manual trigger
  push:
    branches: [ main ]

jobs:
  # should be possible to call with different modules, for now gemini only
  call-llm:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Call Gemini API and Store Results
        run: |
          echo "API Key: $GEMINI_API_KEY"
          echo "API Key length: $(echo '$GEMINI_API_KEY' | wc -c)"
          
          # Get current date in YYYY-MM-DD format
          current_date=$(date +%Y-%m-%d)
          model_name="gemini-2.5-flash"
          
          # Create directory structure
          output_dir="news/${current_date}/${model_name}"
          mkdir -p "$output_dir"
          
          echo "Creating output directory: $output_dir"
          
          response=$(curl -s "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=$GEMINI_API_KEY" \
            -H 'Content-Type: application/json' \
            -X POST \
            -d '{
              "contents": [{
                "parts": [{
                  "text": "From the past 24 hours find 3 the most popular news articles and write a short summary for each of them. Return your response in valid JSON format with the following structure: {\"articles\": [{\"title\": \"Article Title\", \"description\": \"Brief summary of the article\"}, {\"title\": \"Article Title 2\", \"description\": \"Brief summary of the second article\"}, {\"title\": \"Article Title 3\", \"description\": \"Brief summary of the third article\"}]}. Make sure to return only valid JSON, no additional text."
                }]
              }],
              "generationConfig": {
                "temperature": 0,
                "candidateCount": 1,
                "maxOutputTokens": 2048
              }
            }')
          
          echo "Raw API Response:"
          echo "$response"
          
          # Extract the generated content
          generated_content=$(echo "$response" | jq -r '.candidates[0].content.parts[0].text' 2>/dev/null)
          
          if [ "$generated_content" != "null" ] && [ "$generated_content" != "" ]; then
            echo "Generated content extracted successfully"
          
            # Save the generated JSON content to file
            echo "$generated_content" > "${output_dir}/model-output.json"
          
            echo "Content saved to: ${output_dir}/model-output.json"
          
            # Verify the file was created and show its contents
            if [ -f "${output_dir}/model-output.json" ]; then
              echo "File created successfully. Contents:"
              cat "${output_dir}/model-output.json"
          
              # Pretty print if it's valid JSON
              echo "Pretty printed JSON:"
              cat "${output_dir}/model-output.json" | jq '.' 2>/dev/null || echo "Content is not valid JSON"
            else
              echo "Error: File was not created"
            fi
          else
            echo "Error: No content generated or extraction failed"
            echo "Full response: $response"
          fi

      - name: Commit and Push Results
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add the new files
          git add news/
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            # Commit with timestamp
            git commit -m "Add news aggregation for $(date +%Y-%m-%d) - $(date +%H:%M:%S)"
          
            # Push changes
            git push
          
            echo "Changes committed and pushed successfully"
          fi

name: openai-news-aggregator
on:
  # schedule:
  #   - cron: '0 15 * * *' # Runs at 17 00 Berlin Time
  workflow_dispatch:
  # push:
  #   branches: [ main ]

env:
  JSON_CONVERTER_MODEL: "gpt-4o"  # Model used for JSON conversion

jobs:
  openai-news-aggregator:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        model: ["gpt-4o", 'gpt-4.1', 'gpt-4.1-mini']
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Call OpenAI Agents and Store Results
        run: |
          # Get current date in YYYY-MM-DD format
          current_date=$(date +%Y-%m-%d)
          model_name="${{ matrix.model }}"
          
          # Create directory structure
          output_dir="news/${current_date}/${model_name}"
          mkdir -p "$output_dir"
          
          echo "Creating output directory: $output_dir"
          
          # Check if model-output.json already exists for this model
          if [ -f "${output_dir}/model-output.json" ]; then
            echo "Output file already exists for ${model_name_sanitized}, skipping..."
            exit 0
          fi
          
          # Step 1: Get news content using the main model
          echo "Step 1: Getting news content with ${{ matrix.model }}..."

          # Read the prompt from a file
          get_text_news_prompt=$(cat "${{ github.workspace }}/.github/prompts/get_text_news.prompt")
          
          # Use jq to build the JSON payload for a single API call.
          # We use `web_search_preview` for real-time data and `response_format` to enforce JSON output.
          payload=$(jq -n \
            --arg model "${{ matrix.model }}" \
            --arg prompt "$get_text_news_prompt" \
            '{
            model: $model,
            input: $prompt,
            tools: [{"type": "web_search_preview"}],
            "text": {
              "format": {
                "type": "text"
              }
            },
            temperature: 0
            }')
          
          grounded_response=$(curl -s "https://api.openai.com/v1/responses" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -d "$payload")
          
          echo "Raw API response:"
          echo "$grounded_response"

          # Extract the grounded content
          
          grounded_content=$(echo "$grounded_response" | jq -r '.output[] | select(.type=="message") | .content[] | select(.type=="output_text") | .text')
          echo "$grounded_content"
          
          echo "Grounded content extracted successfully."
          
          # Step 2: Convert grounded content to JSON format
          echo "Step 2: Converting to JSON format..."
          
          # Read the base prompt for JSON conversion from a file
          to_json_prompt_base=$(cat "${{ github.workspace }}/.github/prompts/text_news_to_json.prompt")
          
          # Collapse newlines into spaces. jq's --arg will handle JSON escaping.
          single_line_content=$(echo "$grounded_content" | tr '\n' ' ')
          
          prompt="${to_json_prompt_base} ${single_line_content}"
          
          # Use jq to build the JSON payload
          json_payload=$(jq -n \
            --arg model ${{ env.JSON_CONVERTER_MODEL }} \
            --arg prompt "$prompt" \
            '{
            model: $model,
            input: $prompt,
            "text": {
              "format": {
                "type": "json_object"
              }
            },
            temperature: 0
            }')
          
          json_response=$(curl -s "https://api.openai.com/v1/responses" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -d "$json_payload")
          
          echo "Raw JSON response:"
          echo "$json_response"
          
          # Extract the JSON content
          generated_content=$(echo "$json_response" | jq -r '.output[] | select(.type=="message") | .content[] | select(.type=="output_text") | .text')
          echo "JSON content extracted successfully:"
          echo "$generated_content"
          
          # Save the cleaned JSON content to file
          echo "$generated_content" > "${output_dir}/model-output.json"
          
          echo "Content saved to: ${output_dir}/model-output.json"
          
          # Verify the file was created and show its contents
          if [ -f "${output_dir}/model-output.json" ]; then
            echo "File created successfully. Contents:"
            cat "${output_dir}/model-output.json"
          
            # Pretty print if it's valid JSON
            echo "Pretty printed JSON:"
            cat "${output_dir}/model-output.json" | jq '.' 2>/dev/null || echo "Content is not valid JSON"
          else
            echo "Error: File was not created"
          fi

      - name: Commit and Push Results
        if: ${{ !env.ACT }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add news/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Add OpenAI news for $(date +%Y-%m-%d) - ${{ matrix.model }}"
            max_retries=5
            retry_count=0
            while [ $retry_count -lt $max_retries ]; do
              echo "Attempting to push (attempt $((retry_count + 1))/$max_retries)..."
              if git push; then
                echo "Push successful!"
                break
              else
                echo "Push failed, rebasing and retrying..."
                retry_count=$((retry_count + 1))
                if [ $retry_count -lt $max_retries ]; then
                  git pull --rebase origin ${{ github.ref_name }}
                  sleep $((RANDOM % 10 + 1))
                else
                  echo "Max retries reached, push failed"
                  exit 1
                fi
              fi
            done
            echo "Changes committed and pushed successfully"
          fi

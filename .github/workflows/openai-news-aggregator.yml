name: openai-news-aggregator
on:
  schedule:
    - cron: '0 15 * * *' # Runs at 17 00 Berlin Time
  workflow_dispatch: # Allows manual trigger
  push:
    branches: [ main ]

env:
  JSON_CONVERTER_MODEL: "gpt-4o"

jobs:
  openai-news-aggregator:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Start with gpt-4o, but you can easily add more models here later
        # e.g., ["gpt-4o", "gpt-4-turbo"]
        model: ["gpt-4o"]
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Call OpenAI Agents and Store Results
        run: |
          # Get current date in YYYY-MM-DD format
          current_date=$(date +%Y-%m-%d)
          # Sanitize model name for directory usage (e.g., gpt-4o -> gpt-4o)
          model_name_sanitized=$(echo "${{ matrix.model }}" | tr -c 'a-zA-Z0-9-' '-')
          
          # Create directory structure
          output_dir="news/${current_date}/${model_name_sanitized}"
          mkdir -p "$output_dir"
          
          echo "Creating output directory: $output_dir"
          
          # Check if model-output.json already exists for this model
          if [ -f "${output_dir}/model-output.json" ]; then
            echo "Output file already exists for ${model_name_sanitized}, skipping..."
            exit 0
          fi
          
          # Step 1: Get news content using the main model
          echo "Step 1: Getting news content with ${{ matrix.model }}..."

          # Read the prompt from a file
          get_news_prompt=$(cat "${{ github.workspace }}/.github/prompts/get_news.prompt")
          
          # Use jq to build the JSON payload for OpenAI
          # Note: OpenAI doesn't have a built-in search tool like Gemini.
          # The model will use its general knowledge.
          news_payload=$(jq -n \
            --arg model "${{ matrix.model }}" \
            --arg prompt "$get_news_prompt" \
            '{
              model: $model,
              messages: [
                {
                  "role": "system",
                  "content": "You are a helpful news assistant."
                },
                {
                  "role": "user",
                  "content": $prompt
                }
              ],
              temperature: 0.2,
              max_tokens: 2048
            }')

          news_response=$(curl -s "https://api.openai.com/v1/chat/completions" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -X POST \
            -d "$news_payload")
          
          # Extract the news content from OpenAI's response structure
          news_content=$(echo "$news_response" | jq -r '.choices[0].message.content' 2>/dev/null)
          echo "News content received:"
          echo "$news_content"
          
          # Step 2: Convert news content to JSON format
          echo "Step 2: Converting to JSON format with ${{ env.JSON_CONVERTER_MODEL }}..."
          
          # Read the base prompt for JSON conversion
          to_json_prompt_base=$(cat "${{ github.workspace }}/.github/prompts/to_json.prompt")
          
          # Combine the conversion prompt with the news content
          full_json_prompt="${to_json_prompt_base}${news_content}"

          # Use jq to build the JSON payload for the conversion step
          json_payload=$(jq -n \
            --arg model "${{ env.JSON_CONVERTER_MODEL }}" \
            --arg prompt "$full_json_prompt" \
            '{
              model: $model,
              messages: [
                {
                  "role": "user",
                  "content": $prompt
                }
              ],
              temperature: 0,
              max_tokens: 2048
            }')

          json_response=$(curl -s "https://api.openai.com/v1/chat/completions" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -X POST \
            -d "$json_payload")
          
          echo "Raw JSON response:"
          echo "$json_response"
          
          # Extract the final JSON content
          generated_content=$(echo "$json_response" | jq -r '.choices[0].message.content' 2>/dev/null)
          
          echo "JSON content extracted successfully:"
          echo "$generated_content"
          
          # Save the cleaned JSON content to file
          echo "$generated_content" > "${output_dir}/model-output.json"
          
          echo "Content saved to: ${output_dir}/model-output.json"
          
          # Verify the file was created and show its contents
          if [ -f "${output_dir}/model-output.json" ]; then
            echo "File created successfully. Contents:"
            cat "${output_dir}/model-output.json"
            # Pretty print if it's valid JSON
            echo "Pretty printed JSON:"
            cat "${output_dir}/model-output.json" | jq '.' 2>/dev/null || echo "Content is not valid JSON"
          else
            echo "Error: File was not created"
          fi

      - name: Commit and Push Results
        if: ${{ !env.ACT }}  # Only run if NOT running with act
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add the new files
          git add news/
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            # Commit with timestamp
            git commit -m "Add OpenAI news for $(date +%Y-%m-%d) - ${{ matrix.model }}"
          
            # Retry push with rebase up to 5 times
            max_retries=5
            retry_count=0
          
            while [ $retry_count -lt $max_retries ]; do
              echo "Attempting to push (attempt $((retry_count + 1))/$max_retries)..."
          
              if git push; then
                echo "Push successful!"
                break
              else
                echo "Push failed, rebasing and retrying..."
                retry_count=$((retry_count + 1))
          
                if [ $retry_count -lt $max_retries ]; then
                  # Pull with rebase to get latest changes
                  git pull --rebase origin ${{ github.ref_name }}
                  # Wait a random amount of time to reduce conflicts
                  sleep $((RANDOM % 10 + 1))
                else
                  echo "Max retries reached, push failed"
                  exit 1
                fi
              fi
            done
          
            echo "Changes committed and pushed successfully"
          fi
